\documentclass[12pt, a4paper]{article}

 
%%% lietuvybes (sugadina fontus)
%\usepackage[utf8x]{inputenc}
%\usepackage[L7x]{fontenc}
%\usepackage[lithuanian]{babel}

% isjungia triukus, kuriu nereikia
\usepackage{microtype}  
\DisableLigatures[f]{encoding = *, family = * }

% full page
\usepackage[cm]{fullpage}

% flationg options
\usepackage{float}

% sentecijos
\usepackage{epigraph} 

% referinimas ne skaiciumi, o pavadinimu
\usepackage{nameref}


\usepackage{ifpdf}
\ifpdf
\usepackage{pdfpages}
\usepackage[pdftex]{hyperref}
\fi


\usepackage{amsmath}
\usepackage{amscd}
\usepackage[tableposition=top]{caption}
\usepackage{ifthen}

\usepackage{multirow} % multicell in table

\definecolor{shadecolor}{rgb}{0.933, 0.933, 0.933}


\begin{document}




<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
library(xtable)
library("microbenchmark")
library("Rcpp")

opts_chunk$set(background="#EEEEEE", tidy=FALSE, size="footnotesize", cache=TRUE) 
knit_theme$set("acid")  # knit_theme$get()[1]
options(width=90)

load("RPackages.RData")

UsefullPackages <- function(tags){
  packages <- TakePackages(tags, print=FALSE)
  print(xtable(packages
               , caption = paste("Usefull packages of `",paste(tags,collapse=", "), "`.", sep="")
               , digits = 1
               , align = "|l|lcl|"
        )
    ,include.rownames=FALSE
    ,caption.placement="top"
    ,table.placement="H"
  )
}

@


\title{R notes}
\author{Vygantas Butkus}
\maketitle

\tableofcontents

http://adv-r.had.co.nz/

\section{Basic}

<<Basic,eval=FALSE>>=

### Time
  proc.time()
  system.time()

### debug # c, n, where, Q;  
  # options(error = recover) 
  debug()
  browser()
  trace()
  recover()
  traceback()

### Search in environment:
  ?ls; ?objects  # List Objects
  ?search   # Give Search Path for R Objects
  ?apropos; ?find  # Find Objects by (Partial) Name
  ?get      # Return the Value of a Named Object

### Object analysis:
  x <- matrix(1:4-0.5,2,2)
  class(x)        # matrix
  mode(x)         # numeric 
  storage.mode(x) # double
  typeof(x)       # double
  attributes(x)   # dim [1] 2 2
  names(x)        # NULL  
  terms(lm(Sepal.Length ~ Sepal.Width, data=iris)) # For models

  # S3
  methods(class="matrix")	          # the list of all S3 methods
  methods("summary")                # functions of `summary` by class
  getS3method("summary", "matrix")  # Get the body of the function
  getClass("matrix")

  # S4
  library("Matrix")
  mat <- Matrix(1:6, 3, 2)  # S4 object  
  getClass(class(mat))  # or `showClass(class(mat))`
  getSlots(class(mat))  # or `slotNames(mat)`
  mat@Dim
  methods(class = "Matrix")
  showMethods(class = "Matrix")

### Set operations:
  union(x, y)
  intersect(x, y)
  setdiff(x, y)
  setequal(x, y)
  is.element(el, set)
  subset(old,logical)

### Index, match
  a %in% b
  match()
  which()

### Loopless
  tapply()    # Apply a Function Over a Ragged array. General, good and fast
  by()        # `tapply` for `data.frame` (or matrix)
  aggregate() # Compute Summary Statistics of Data Subsets
  apply()     # Apply Functions Over Array Margins
  mapply()    # Apply a Function to Multiple List or Vector Arguments
  outer()     # Outer Product of Arrays
  Vectorize() # Vectorize a Scalar Function
  # Apply a Function over a List or Vector:
  lapply()
  sapply() 
  replicate()

### Sequences
  rep(1:4, each = 2)   # 1 1 2 2 3 3 4 4
  rep(1:4, c(2,1,2,1)) # 1 1 2 3 3 4
  seq(1, 9, by = pi)	 # 1.000000 4.141593 7.283185
  sequence(c(3,2))	   # 1 2 3 1 2
  seq_along(5:10)      # 1 2 3 4 5 6
  unique()
  duplicated()

### Combinatorics, possible combinations, brudforce:
  combn(x, m, FUN = NULL)	# All Combinations of n Elements, Taken m at a Time (with sunction)
  expand.grid()	            # All combinations (with simetry)
  choose(n, k)	#pasirinkimu skaicius (C is n po K)
  factorial(n)
  combinations()	#from gtools
  permutations()	#from gtools

### Vector, matrix, array
  # manipulation
  subset()
  with();within()
  t(); aperm();

  # Ordering
  order()
  sort.list()
  sort()
  arrange() # drom plyr package
  rank()
  # appending
  cbind()
  rbind()
  append()
  # calculation
  A %*%	B		#matricu daugyba
  tcrossprod()		# fast product
  outer(X, Y, FUN="*", ...)			# outer product {%o%}
  kronecker(X, Y, FUN = "*")		# kronecer product {%x%}  
  # Misc
  colSums(); rowSums() 
  split(); cut()  # grouping
  rev()       # reverse
  embed(x,2) 	# laged matrix

### Functions, solutions
  optim()       # General optimisation
  optimize()      # one dimension optimisation 
  constrOptim()   # constrain optimisation 
  uniroot()     # the root of monotone functions
  nlm()  	# Non-linear minimisation
  nlminb()		# More robust (non-)constrained non-linear minimisation

### Strings: 
  paste()
  format()
  formatC()
  # Substrings (vectorised, can raplece)
  substr(x, start, stop)
  substring(text, first, last = 1000000L)
  # replacments
  sub(pattern, replacement, x)
  gsub(pattern, replacement, x)
  # Find patern
  grep(pattern, x) ;
  grepl(pattern, x)
  # find expresion
  regexpr(pattern, text)
  gregexpr(pattern, text)
  # interpretation
  eval(parse(text = "(d <- 4 + 7)"))
  substitute(expr, env)
  # misc 
  strsplit("a,b;c", ",|;") # a, b, c 
  nchar() # the length of string
  chartr() # traslete: L -> L
  tolower()
  toupper()
  as.numeric(as.character(f)) # factor - > number

### Files
  ?files         # Help on low-level interface to file system
  list.files()   # List files in a give directory
  file.info()    # Get information about files


### Misc: 
  interaction()   # Joining factors
  x %% y 	  #mod 
  x %/% y 	#div
  identical()
  suppressMessages
  
### Built-in constants:
  pi;letters;LETTERS   # Pi, lower & uppercase letters, e.g. letters[7] = "g"
  month.abb;month.name # Abbreviated & full names for months


### Graphics
  help(package=graphics) # List all graphics functions
  
  plot()                # Generic function for plotting of R objects
  par()                 # Set or query graphical parameters
  curve(5*x^3,add=T)    # Plot an equation as a curve
  points(x,y)           # Add another set of points to an existing graph
  arrows()              # Draw arrows [see errorbar script]
  abline()              # Adds a straight line to an existing graph
  lines()               # Join specified points with line segments
  segments()            # Draw line segments between pairs of points
  hist(x)               # Plot a histogram of x
  pairs()               # Plot matrix of scatter plots
  matplot()             # Plot columns of matrices
  boxplot()

  ?identify  

  ?device               # Help page on available graphical devices
  ?dev.control 
  postscript()          # Plot to postscript file
  pdf()                 # Plot to pdf file
  png()                 # Plot to PNG file
  jpeg()                # Plot to JPEG file
  X11()                 # Plot to X window
  persp()               # Draws perspective plot
  contour()             # Contour plot
  image()               # Plot an image
  dev.off() 

  x= recordPlot()                           #save the current plot device output in the object x
  replayPlot(x)                            #replot object x
  layout(mat)                         #specify where multiple graphs go on the page
                                      #experiment with the magic code from Paul Murrell to do fancy graphic location
  layout(rbind(c(1, 1, 2, 2, 3, 3),
               c(0, 4, 4, 5, 5, 0)))   
  for (i in 1:5) {
    plot(i, type="n")
    text(1, i, paste("Plot", i), cex=4)
  }

### Statistical 
  help(package=stats)   # List all stats functions
  
  ?Chisquare            # Help on chi-squared distribution functions
  ?Poisson              # Help on Poisson distribution functions
  help(package=survival) # Survival analysis
  
  cor.test()            # Perform correlation test
  cumsum(); cumprod(); cummin(); cummax()   # Cumuluative functions for vectors
  density(x)            # Compute kernel density estimates
  ks.test()             # Performs one or two sample Kolmogorov-Smirnov tests
  loess(); lowess()     # Scatter plot smoothing
  mad()                 # Calculate median absolute deviation
  mean(x); weighted.mean(x); median(x); min(x); max(x); quantile(x)
  rnorm(); runif()      # Generate random data with Gaussian/uniform distribution
  splinefun()           # Perform spline interpolation
  smooth.spline()       # Fits a cubic smoothing spline
  sd()                  # Calculate standard deviation
  summary(x)            # Returns a summary of x: mean, min, max etc.
  t.test()              # Student's t-test
  var()                 # Calculate variance
  sample()              # Random samples & permutations
  ecdf()                # Empirical Cumulative Distribution Function
  qqplot()              # quantile-quantile plot

### Help
  ?Control     # Help on control flow statements (e.g. if, for, while)
  ?Extract     # Help on operators acting to extract or replace subsets of vectors
  ?Logic       # Help on logical operators
  ?Mod         # Help on functions which support complex arithmetic in R
  ?Paren       # Help on parentheses
  ?regex       # Help on regular expressions used in R
  ?Syntax      # Help on R syntax and giving the precedence of operators
  ?Special     # Help on special functions related to beta and gamma functions




@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Data}

\subsection{Input-Output}

Main base functions:
<<DataInputBase,eval=FALSE>>=
?read.table  # ..., Reads a file in table format and creates a data frame from it
?scan        # Read data into a vector or list from the console or file
?readLines   # Read Text Lines from a Connection
?readBin     # read binary data

?connections    # ..., Functions to Manipulate Connections
?textConnection # Text Connections

?save; load         # Reload Saved Datasets
?readRDS; ?saveRDS; # Functions to write a single R object to a file, and to restore it.
@


<<DataIOPackages,echo=FALSE, results="asis">>=
UsefullPackages(c("data", "input-output"))
@


See also:
\nameref{sec:Database}

\subsubsection*{Special examples}
<<InputOutputExamples,eval=TRUE,out.line=4>>=
text <- "
1 2 3
4 5 6
7 8 9
"
read.table(textConnection(text))
@



\subsection{Manipulation}\label{sec:Manipulation}


<<DataManipulationPackages,echo=FALSE, results="asis">>=
UsefullPackages(c("data", "manipulation"))
@

\subsubsection*{Special examples}
<<DataManipulationExamples,echo=TRUE>>=

# list -> matrix
list2mt <- function(lst){
  return(do.call(rbind, lst))
}

# matrix -> list
mt2list <- function(mt){
	return(split(mt, row(mt)))
} 

# sort matrix by colums. 
msort <- function(mt, sortnr=1, desc=FALSE){
  if(desc) mt <- -mt
  
  if(length(sortnr)==1){
    return(mt[order(mt[,sortnr]),]) 
  }else{
    return(mt[do.call(order,mt2list(t(mt[,sortnr]))),])   
  }    
}

# sort DF. See also: arrange {plyr}
esort <- function(df, sortvar, ...) {
	attach(df,warn.conflicts = FALSE )
	df <- df[with(df,order(sortvar,...)),]
	detach(df)
	return(df)
}

@


\subsection{Database}\label{sec:Database}

<<DataDatabase,echo=FALSE, results="asis">>=
UsefullPackages(c("data", "database"))
@

<<DataDatabaseExamples>>=
library("RSQLite")  # databese with out server
drv    <- dbDriver("SQLite")
con <- dbConnect(drv, dbname=":memory:")  # if for saving: dbConnect(drv,"newexample.db")


n = ceiling(1e6/26^2) # 1 million rows
DF = data.frame(x=rep(LETTERS,each=26*n),
  y=rep(letters,each=n),
  v=rnorm(n*26^2),
  stringsAsFactors=FALSE
)

res = dbWriteTable(con,"data",DF)

dbListTables(con)
dbListFields(con, "data")

res <- dbSendQuery(con, "select x, sum(v) as sum_v from data group by x") 
head(fetch(res, -1))  # or use dbGetQuery to do everything
dbClearResult(res)
@

\subsection{Big-Data}

<<DataBigData,echo=FALSE, results="asis">>=
UsefullPackages(c("data", "big-data"))
@

\begin{itemize}
\item Package `bigmemory` is from the family of `big data`. The whole list: 
bigmemory, biganalytics, bigtabulate, bigalgebra.

\item Nowadays it is in very active development MapReduce jobs in Hadoop,
that is implimented in `rmr` package.
\end{itemize}

<<DataBigDataExamples,eval=FALSE>>=
library("data.table") # it is very fast for big data (in proper ussing)
# ?data.table

# create
DT = data.table(x=rep(c("a","b","c"),each=3), y=c(1,3,6), v=1:9)
setkey(DT,x,y)
DT

# colums
head(DT[,v])
head(DT[,2,with=FALSE])          # 2nd column

# rows
DT[2]
DT[2,]
DT[2:3, sum(v)]  # sum(v) over rows 2 and 3
DT[c(FALSE,TRUE)]    

# subseting
DT[x=="b" & y==3,] # works but is using data.table badly
DT[J("b", 3)]      # goodway  
DT[!J("b", 3)]     # revers

DT[x=="b" & y<5,]   # works but is using data.table badly
DT[J("b", 1:4)]     # wiht NA  
DT[J("b", 1:4),roll=TRUE]     # fill NA
DT[J("b", 1:4),nomatch=0]     # remuve NA

# BY
DT[,sum(v),by=x]
DT[,sum(v),by=list(y%%2)] # by expression
DT[,.SD[2],by=x]           # 2nd row of each group
DT[,list(MySum=sum(v),
         MyMin=min(v),
         MyMax=max(v)),
    by=list(x,y%%2)]   

# compound query
DT[,sum(v),x][V1<20]      

# adding computed colum 
DT[,m:=mean(v),by=x]  


@



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Programing}

\subsection{Debuging}

<<DebugingExamples,eval=FALSE>>=

##### Debuging. RStudio has quite good debuging tools for deep debuging.
    # The strategy there to start
    # 1) Then the error occurs use
    traceback()
    # 2)Use
    options(error=recover);
    # or 
    options(error=browser);
    # (after debuging set `options(error=NULL);` )
    # and rerun the code. In error you can start exploring.
    # 3) Finily use
    with_debug(install()) # in package developing (with devtools)
    debug() 
    browser()
    # or break points in RStudio for deap investigation.
    # 4) for source code and scripts use
    findLineNum() 
    setBreakpoint()
@

\subsection{Compiling}
<<CompilingExamples,eval=TRUE>>=
##### Compiling. Good for looping or smth.
    # If caling external function - have no speed benefit.
    # Be aware of recursion - must compile with same name (prefered) or resursion sould use `Rcall`
    # Compiling with same name is OK

library("compiler")
# ?cmpfun

### Matrix multiplication with a lot of loops
MM <- function(A, B){
  if(dim(A)[2]!=dim(B)[1]) stop("incompatable")
  v <- dim(A)[2]
  ans <- matrix(NA, dim(A)[1], dim(B)[2])
  for(i in 1:dim(ans)[1]){
    for(j in 1:dim(ans)[2]){
      dum <- 0
      for(k in 1:v){
        dum <- dum + A[i, k]*B[k, j]
      }
      ans[i,j] <-  dum 
    }
  }
  ans  
}
MMC <- cmpfun(MM)

### test
A <- matrix(1:6, 2, 3)
B <- matrix(1:12, 3, 4)
all.equal(A %*% B, MM(A, B))
all.equal(A %*% B, MMC(A, B))

### speed
require("rbenchmark")

A <- matrix(rnorm(20*10), 20, 10)
B <- matrix(rnorm(10*30), 10, 30)
benchmark(MM(A, B), MMC(A, B), A%*%B)

### Function compiling it self - it is OK
MM <- cmpfun(MM)
benchmark(MM(A, B), MMC(A, B), A%*%B)

@


\subsection{Recursion}
<<RecursionExamples,eval=TRUE>>=
##### Compiling. Good for looping or smth.
    # 1. Avoid it,  if you know alternatives
    # 2. Do not use Recall (unless you really need renaming)
    # 3. If possible use some kind memoise
    # 4. Compile (with same name)

# Very simple Fibonachi functin
fibonacci1 <- function(seq) {
  if (seq == 1) return(1);
  if (seq == 2) return(1);
  return (fibonacci1(seq - 1) + fibonacci1(seq - 2));
}

# same function using `Recall`
fibonacci2 <- function(seq) {
  if (seq == 1) return(1);
  if (seq == 2) return(1);
  return (Recall(seq - 1) + Recall(seq - 2)); # Do not use! it jus slow down
}

# Fibonachi with memose
library("memoise")
fibonacci1M <- memoise(fibonacci1)  # must be with new name

# best alternative is use your own memose
fibonacci_M <- local({
  memo <- c(1, 1, rep(NA, 100000))
  f <- function(x) {
    if(x == 0) return(0)
    if(x < 0) return(NA)
    if(x > length(memo))
      stop("’x’ too big for implementation")
    if(!is.na(memo[x])) return(memo[x])
    ans <- f(x-2) + f(x-1)
    memo[x] <<- ans
    ans
  }
})

require("rbenchmark")
n <- 20
benchmark(fibonacci1(n), fibonacci2(n), fibonacci1M(n), fibonacci_M(n), order=NULL)
@


\subsection{Rcpp(C++)}

The package \texttt{Rcpp} allows to impliment C++ code easily and with minimal knowledge.
Main links:
\begin{itemize}  
  \item http://adv-r.had.co.nz/Rcpp.html
  \item http://dirk.eddelbuettel.com/code/rcpp/Rcpp-quickref.pdf
  \item http://cran.r-project.org/web/packages/Rcpp/index.html
  \item http://www.rcpp.org/
  \item http://dirk.eddelbuettel.com/code/rcpp/html/index.html
\end{itemize}

All R types are supported (vectors, functions, environment, etc ...):\\
IntegerVector, NumericVector, LogicalVector, CharacterVector,\\
IntegerMatrix, NumericMatrix, LogicalMatrix, CharacterMatrix.\\

The types that do not have C types gos only with capital letter:\\
List, Function, Environment,..

Good reference could be fould in \texttt{Rcpp-quickref.pdf}. Here is very basic
\begin{verbatim}
// Geting values
  x[i]
  x(i,j)

//geting info
  .size()
  .nrow()
  .ncol()
  .length()

//Very importas is iterator, see in examples
  ::iterator
  .begin()
  .end() 

//basic procedures
  .create
  .fill
  .import
  .insert

//misc
  .erase
  .eval
  .get_na
  .is_na
  .offset
  .sort
\end{verbatim}

Very first example of making C++ in R. It is jus like 'Hellow world':
<<Rcpp1>>=
library("Rcpp")
cppFunction('
  int add(int x, int y, int z) {
    int sum = x + y + z;
    return sum;
  }'
)
add(1, 2, 3)
@

An example of misc basics. Writing mean function in several ways. See comments:
<<Rcpp2>>=
sourceCpp(code='
#include <numeric>      // including member of STL library
#include <Rcpp.h>       // Necesary package for R
using namespace Rcpp;

// An example of inner function (pass by reference, but protected )
double SumManual(const NumericVector& x){
  int n = x.size();
  double total = 0;
  for(int i = 0; i < n; ++i) {
    total += x[i] ;
  }
  return total;
}

// exported function (pass by reference and not protected)
// The function that is experted to R must have this cooment:
// [[Rcpp::export]]
double meanC(NumericVector& x, int type=1) {
  int n = x.size();
  double mean = 0;
  x[0] = 1000; // if calling without `const` this can change the value in x. 
  
  if (type==1)
    mean = sum(x);        // sugal example - an eqvivanlent of sum funtion
  else if (type==2)
    mean = SumManual(x);  // our writen function
  else if (type==3){
    // Very important example if you want to use librarys
    // Ussing standart librarys, with iterators. 
    mean = std::accumulate(x.begin(), x.end(), 0.0);  // STL example (with iterators) 
  }else{
    // messages:
    printf("There are no such type. (Just note).\\n");
    std::cout << "Another note using std:cout \\n";
    stop("There are no such type. (stop).\\n");
  }
    
  mean /= n;
  return mean;
}
')
x <- rnorm(10^2)

# having error form C++: 
meanC(x, type = 0)  

# Comparing
all.equal(mean(x), meanC(x, type=1), meanC(x, type=2), meanC(x, type=3))

library("microbenchmark")
microbenchmark(mean(x), meanC(x, type = 1), meanC(x, type = 2), meanC(x, type = 3))
head(x)
@

A quickref for matrix
<<Rcpp_matrixReff,eval=FALSE>>=
SEXP x;
NumericMatrix xx(x);

// Matrix of 4 rows & 5 columns (filled with 0)
NumericMatrix xx(4, 5);

// Fill with value
int xsize = xx.nrow() * xx.ncol();
for (int i = 0; i < xsize; i++) {
  xx[i] = 7;
}
// Same as above, using STL fill
std::fill(xx.begin(), xx.end(), 8);

// Assign this value to single element
// (1st row, 2nd col)
xx(0,1) = 4;

// Reference the second column
// Changes propagate to xx (same applies for Row)
NumericMatrix::Column zzcol = xx( _, 1);
zzcol = zzcol * 2;
// Copy the second column into new object
NumericVector zz1 = xx( _, 1);
// Copy the submatrix (top left 3x3) into new object
NumericMatrix zz2 = xx( Range(0,2), Range(0,2));

@


The example of ussing C++ librarys and  \texttt{iterator}. 
The eqvivalent of the function \texttt{findInterval}. 
<<Rcpp3>>=
sourceCpp(code='
#include <algorithm>    // using advanced templates in STL library
#include <Rcpp.h>
using namespace Rcpp;

// [[Rcpp::export]]
IntegerVector findInterval2(NumericVector x, NumericVector breaks) {
  IntegerVector out(x.size());  // Creating vector of precise size
  
  // iterator is similar to pointer - it points in some kind of object and have ability to move
  // iterator value is address, and the actual value of variable is accessed by *iterator
  // Definition
  NumericVector::iterator it, pos;
  IntegerVector::iterator out_it;
  // Assigning  
  NumericVector::iterator BreaksBegin = breaks.begin();
  NumericVector::iterator breaksEnd = breaks.end();


  // iterators intuations: go from beging to end by one step - just like regular `for`, but iteatos are in abstract level,
  // therefore a lot of algorithms works for specific class, in this case Rcpp::NumericVector
  for(it = x.begin(), out_it = out.begin(); it != x.end(); ++it, ++out_it) {  // Two iterators in one `for`
    // the function `upper_bound` requres iterators (First, Last) and the constant values,
    // therefore we put `*it`
    pos = std::upper_bound(BreaksBegin, breaksEnd, *it);  // returs iterator, but we need position
    // distance: Calculates the number of elements between first and last - so it is a possition
    *out_it = std::distance(BreaksBegin, pos);  // The output can be assigin directily by iterator using *
  }
  return out;
}
')
x <- rnorm(10^1)
breaks <- c(-Inf, -3, -2, -1, 0, 1, 2, 3, Inf)
all.equal(findInterval(x, breaks), findInterval2(x, breaks))
microbenchmark(findInterval(x, breaks), findInterval2(x, breaks))

@



An example of best abstraction: List and Function, without knowing anything C code wors just fine (but slow). 
<<Rcpp4>>=
# Function and List: works in CPP, so you can actualy use R function in CPP,
# but it acually quite slow. Therefore, if posible use R function ir R and C funciton in C.
# But list is quite usefull - in  fact it can contain any object with out knowing.
cppFunction(code='
List lapply1(List input, Function f) {
  int n = input.size();
  List out(n);
  for(int i = 0; i < n; i++) {
    out[i] = f(input[i]);
  }
  return out;
}
')
foo <- function(n) 2^n + 1
microbenchmark(lapply1(1:3, foo), lapply(1:3, foo))
@

An example of regular arrays(C) and compatability with R.
<<Rcpp5>>=
# Technicly, array in R is jus a vector with atrributes. So C eqvivalnet is Vector.
# There is no eqvivalnet to get C array (but we have matrix, or 3D cube - they are special calsses)
sourceCpp(code='
#include <Rcpp.h>
using namespace Rcpp;

// REturning a list with all our toys
// [[Rcpp::export]]
List arr(NumericVector input, IntegerVector dim, IntegerVector dummy) {
  
  Dimension d(dim);                  // get the dim object
  
  // making R array with dimensions
  NumericVector array(d);            // create vec. with correct dims
  std::copy(input.begin(), input.end(), array.begin());  // copy - it is not optimal, it just an example
  // now `array` is  NumericVector, but in R it will be an array with dimesnions

  // much better way is to assign dim attribute
  input.attr("dim") = d;

  return List::create(
    _["input"] = input, 
    array     // no name
  );
}
')

x = 1:8
y = arr(x, c(2,2,2), 1:5)
@


From C to R, From R to C
<<Rcpp6>>=
sourceCpp(code='
#include <iterator>
#include <vector>
#include <Rcpp.h>
using namespace Rcpp;

// [[Rcpp::export]]
List RC(NumericVector input) {
  
  // From C to R #1
  double mynum[] = {0.5,1776,7,4};   // Creating regular C array
  std::vector<double> foo;           // Creating regualr C vector
  foo.assign(mynum, mynum + sizeof mynum / sizeof mynum[0]); //assigning values (could be done in creation)
  SEXP bar = wrap (foo);
 

  // From C to R #2 - directly in R eqvivanlent
  int myint[] = {1776,7,4};
  NumericVector bar2(myint, myint + sizeof myint / sizeof myint[0]);

  // From R to C #1 
  double* a = &input[0];  
  std::cout << a[0] << ", " << a[1]<< ", ...\\n";

  // From R to C #2 
  double a2[100];
  std::copy(input.begin(), input.end(), a2);
  std::cout << a2[0] << ", " << a2[1]<< ", ...\\n";


  return List::create(
    bar,
    bar2
  );
}
')

x = 1:8
RC(x)
@


Fast linar algebra, ussing extra package (and it tipes, that are compatable with R)
<<Rcpp7>>=
sourceCpp(code='
#include <RcppArmadillo.h>
//[[Rcpp::depends(RcppArmadillo)]]

#include <Rcpp.h>
using namespace Rcpp;

// [[Rcpp::export]]
List fastLm(NumericVector yr, NumericMatrix Xr) {

    int n = Xr.nrow(), k = Xr.ncol();

    arma::mat X(Xr.begin(), n, k, false);       // reuses memory and avoids extra copy
    arma::colvec y(yr.begin(), yr.size(), false);

    arma::colvec coef = arma::solve(X, y);      // fit model y ~ X
    arma::colvec resid = y - X*coef;            // residuals

    double sig2 = arma::as_scalar( arma::trans(resid)*resid/(n-k) );
                                                // std.error of estimate
    arma::colvec stderrest = arma::sqrt( sig2 * arma::diagvec( arma::inv(arma::trans(X)*X)) );

    return Rcpp::List::create(
        Rcpp::Named("coefficients") = coef,
        Rcpp::Named("stderr")       = stderrest
    ) ;
}

//[[Rcpp::export]]
arma::mat mult(arma::mat A, arma::mat B) {
  return A*B;
}

')

A <- matrix(1:9, 3, 3);
B <- matrix(9:1, 3, 3);

microbenchmark(A%*%B, mult(A, B))

@

\subsection{Developing}

Creating and developing packages.

<<ProgramingDeveloping,echo=FALSE, results="asis">>=
UsefullPackages(c("programing", "developing"))
@




<<DevelopingExamples,eval=FALSE>>=
library("devtools")
help(package="devtools")

##### 1.  Creating package folder with necesary infrastructure (use one folder up)  
    #  And put the content that you allready have.
    # Sugestions:
    # a) basic in-buld sunction
    package.skeleton()  
    # b) devtools function    
    create()
    # c) RStudio meniu
    # d) From other packages. Very usefull for optional failes.

##### 2.  Codding. Start coding in R folder. 
    # The loan can be done by
    load_all()  # devtools
    # If you allready have some version of the package that is curently in use you
    # can isolate developing code in 
    dev_mode()  # devtools

##### 3. Then having starting code you should write tests to make sure everything works as
    # intended to be. 
    library("testthat")
    ?test
    ?test_that

##### 4. Profiling
    Rprof
    summaryRprof
    library("profr")
    help(package="profr")

##### 5. Preparing code. Making well format, commenting (+documentation in comment with roxygen2)
    library("formatR")
    help(package="formatR")


##### 6. Documentation
  ### For functions. use one of the strategies (you can mix them, but it is not rezomended):
    # a) manual documentation
    ?prompt #Produce Prototype of an R Documentation File
    check_doc() 
    # b) in-code documentation
    library("roxygen2")
    ?document  # Use roxygen to make documentation
    ?roxygenize
  ### Do not foget to
    # Writing ReadMe
    # writing vinigete.
    # demo
    # package description
    dev_help("Vmisc")
    build_vignettes()

##### 7. local install
    install(quick=TRUE)
    library("Vmisc")
    help(package="Vmisc")


##### 8. final scheck, and bild
    check()
    build()
    # ?release

@

\subsubsection{Vignettes}

\begin{itemize}

\item A vignettes should be write in \emph{vignettes} package. 
All necessary files should be in this directory (or sub-directory).

\item The vignettes could be Rn(pd) or Rd(html). Let assume it is Rnw.

\item Meta data should be included in the comments. Main list:
\begin{verbatim}
%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{Just a pdf example}
%\VignetteDepends{}
%\VignetteKeywords{string, misc}
%\VignettePackage{Vmisc}
\end{verbatim}

\item If Vignette source file is Rwn, then it could be clasical Sweave or other (e.g. \emph{knitr}).
If using \emph{knitr}, then
  \begin{itemize}
    \item it sould be decleard in meta-date comment (note the first line).
    \item it sould be declear in DESCRIPTION file, line 'VignetteBuilder: knitr'
    \item knitr package should be included in DESCRIPTION file 'Suggests' filed, e.g : Suggests: knitr, ...
  \end{itemize}
\end{itemize}




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Special topics}

\subsection{Search in environment}

<<SearchBase,eval=FALSE>>=
### Search in environment, base functions
?ls; ?objects     # List Objects
?search           # Give Search Path for R Objects
?apropos; ?find   # Find Objects by (Partial) Name
?get              # Return the Value of a Named Object
@

\subsubsection*{Special examples}
<<SearchExamples,eval=TRUE,out.line=4>>=
head(ls("package:base", pattern="str"))
head(apropos("str"))

@




\subsection{Strings}\label{sec:strings}
<<StringBase,eval=FALSE>>=
### Strings: 
  paste()
  format()
  formatC()
  # Substrings (vectorised, can raplece)
  substr(x, start, stop)
  substring(text, first, last = 1000000L)
  # replacments
  sub(pattern, replacement, x)
  gsub(pattern, replacement, x)
  # Find patern
  grep(pattern, x) ;
  grepl(pattern, x)
  # find expresion
  regexpr(pattern, text)
  gregexpr(pattern, text)
  # interpretation
  eval(parse(text = "(d <- 4 + 7)"))
  substitute(expr, env)
  # misc 
  strsplit("a,b;c", ",|;") # a, b, c 
  nchar() # the length of string
  chartr() # traslete: L -> L
  tolower()
  toupper()
  as.numeric(as.character(f)) # factor - > number
@

<<Strings,echo=FALSE, results="asis">>=
UsefullPackages(c("strings"))
@



\subsubsection*{Special examples}
<<StringExamples,eval=TRUE,out.line=4>>=
### Basic operations
text <- "Hellow, # comment

     The line after empty line       with     lots   of   sapces.     
"
doc <- readLines(textConnection(text))
# remove comments
doc <- gsub("#.+$", "", doc)
# remove dublicate space
doc <- gsub("\\s+", " ", doc)
# Trim the rest
doc <- gsub("^\\s+|\\s+$", "", doc)
# remove empty lines
doc <- doc[nchar(doc)>0]
doc

### reverse
(a = "this is a string"); paste(rev(substring(a,1:nchar(a),1:nchar(a))),collapse="")

### vecorise string substitution
(x <- c("aaaa","bbbb","cccc")); substring( x  , 2) <- c("..", "+++"); x; 



### Binary string concat
"%.%" <- function(x,y) paste(x,y,sep="")
"I love " %.% "R."

### String matrix spliting
SplitLines <- function(x, chMode, sep=" "){
  ats = do.call(rbind, strsplit(x, sep))
  if (!missing(chMode)){
    storage.mode(ats)<-chMode
  }	
  return(ats)
}
text <-c( 
   "1 2 3"
  ,"4 5 6"
  ,"7 8 9"
)
X <- SplitLines(text,"double")

# Alternative from data input:
X <- read.table(textConnection(text))

@




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Graphics}

<<graph,echo=FALSE, results="asis">>=
UsefullPackages(c("graph"))
@

\section{Data science}

\subsection{Machine and Statistical Learning}


<<StatisticsLearning,echo=FALSE, results="asis">>=
UsefullPackages(c("learning"))
@

<<Learning,eval=FALSE>>=
# randomForest
library("randomForest")
rf <- randomForest(train, labels)

### SVM   
library("kernlab")  # pasirupina gerais defoltais ir yra daugiau metodu
sv <- ksvm(train, labels)

library("e1071")  # siame pakete yra visko, cia svm yra esmine realizacija
sv <- svm(train, labels, kernel="sigmoid") # linear sigmoid polynomial radial




# k-nearest nabahood
library(FNN)
PredTest_knn = knn(train, test, labels, k = 5)

# recursive partition
library("rpart")
rp <- rpart(labels ~ ., data = TrainDF)

# neuron networks
library("nnet")
nn <- nnet(labels ~ ., data = TrainDF[,1:20, 980:1001], size = 40)


library(neuralnet)
?neuralnet

@


\appendix

\section{Drafts}



\end{document}